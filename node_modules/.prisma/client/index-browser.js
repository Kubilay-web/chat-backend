
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  displayName: 'displayName',
  email: 'email',
  passwordHash: 'passwordHash',
  googleId: 'googleId',
  avatarUrl: 'avatarUrl',
  bio: 'bio',
  image: 'image',
  location: 'location',
  portfolio: 'portfolio',
  reputation: 'reputation',
  role: 'role',
  rolejob: 'rolejob',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponToUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  couponId: 'couponId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiresAt: 'expiresAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  type: 'type',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  issuerId: 'issuerId',
  postId: 'postId',
  type: 'type',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  url: 'url',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  url: 'url',
  featured: 'featured',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  url: 'url',
  logo: 'logo',
  cover: 'cover',
  status: 'status',
  averageRating: 'averageRating',
  featured: 'featured',
  returnPolicy: 'returnPolicy',
  defaultShippingService: 'defaultShippingService',
  defaultShippingFeePerItem: 'defaultShippingFeePerItem',
  defaultShippingFeeForAdditionalItem: 'defaultShippingFeeForAdditionalItem',
  defaultShippingFeePerKg: 'defaultShippingFeePerKg',
  defaultShippingFeeFixed: 'defaultShippingFeeFixed',
  defaultDeliveryTimeMin: 'defaultDeliveryTimeMin',
  defaultDeliveryTimeMax: 'defaultDeliveryTimeMax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserFollowingStoreScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  brand: 'brand',
  rating: 'rating',
  sales: 'sales',
  numReviews: 'numReviews',
  shippingFeeMethod: 'shippingFeeMethod',
  views: 'views',
  freeShippingForAllCountries: 'freeShippingForAllCountries',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  categoryId: 'categoryId',
  subCategoryId: 'subCategoryId',
  offerTagId: 'offerTagId'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  variantName: 'variantName',
  variantDescription: 'variantDescription',
  variantImage: 'variantImage',
  slug: 'slug',
  isSale: 'isSale',
  saleEndDate: 'saleEndDate',
  keywords: 'keywords',
  sku: 'sku',
  sales: 'sales',
  weight: 'weight',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SizeScalarFieldEnum = {
  id: 'id',
  size: 'size',
  quantity: 'quantity',
  price: 'price',
  discount: 'discount',
  productVariantId: 'productVariantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  alt: 'alt',
  productVariantId: 'productVariantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ColorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  productVariantId: 'productVariantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  productId: 'productId',
  variantId: 'variantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingRateScalarFieldEnum = {
  id: 'id',
  shippingService: 'shippingService',
  shippingFeePerItem: 'shippingFeePerItem',
  shippingFeeForAdditionalItem: 'shippingFeeForAdditionalItem',
  shippingFeePerKg: 'shippingFeePerKg',
  shippingFeeFixed: 'shippingFeeFixed',
  deliveryTimeMin: 'deliveryTimeMin',
  deliveryTimeMax: 'deliveryTimeMax',
  returnPolicy: 'returnPolicy',
  countryId: 'countryId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FreeShippingScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FreeShippingCountryScalarFieldEnum = {
  id: 'id',
  freeShippingId: 'freeShippingId',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  variant: 'variant',
  variantImage: 'variantImage',
  review: 'review',
  rating: 'rating',
  color: 'color',
  size: 'size',
  quantity: 'quantity',
  likes: 'likes',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  alt: 'alt',
  reviewId: 'reviewId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  couponId: 'couponId',
  shippingFees: 'shippingFees',
  subTotal: 'subTotal',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantId: 'variantId',
  sizeId: 'sizeId',
  productSlug: 'productSlug',
  variantSlug: 'variantSlug',
  sku: 'sku',
  name: 'name',
  image: 'image',
  size: 'size',
  price: 'price',
  quantity: 'quantity',
  shippingFee: 'shippingFee',
  totalPrice: 'totalPrice',
  cartId: 'cartId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingAddressScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  address1: 'address1',
  address2: 'address2',
  state: 'state',
  city: 'city',
  zip_code: 'zip_code',
  default: 'default',
  userId: 'userId',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  shippingFees: 'shippingFees',
  subTotal: 'subTotal',
  total: 'total',
  orderStatus: 'orderStatus',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  shippingAddressId: 'shippingAddressId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderGroupScalarFieldEnum = {
  id: 'id',
  status: 'status',
  shippingService: 'shippingService',
  shippingDeliveryMin: 'shippingDeliveryMin',
  shippingDeliveryMax: 'shippingDeliveryMax',
  shippingFees: 'shippingFees',
  subTotal: 'subTotal',
  total: 'total',
  orderId: 'orderId',
  storeId: 'storeId',
  couponId: 'couponId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantId: 'variantId',
  sizeId: 'sizeId',
  productSlug: 'productSlug',
  variantSlug: 'variantSlug',
  sku: 'sku',
  name: 'name',
  image: 'image',
  size: 'size',
  quantity: 'quantity',
  shippingFee: 'shippingFee',
  price: 'price',
  totalPrice: 'totalPrice',
  orderGroupId: 'orderGroupId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  variantId: 'variantId',
  sizeId: 'sizeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  startDate: 'startDate',
  endDate: 'endDate',
  discount: 'discount',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentDetailsScalarFieldEnum = {
  id: 'id',
  paymentInetntId: 'paymentInetntId',
  paymentMethod: 'paymentMethod',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  orderId: 'orderId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryJobScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  statename: 'statename',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  stateId: 'stateId',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobtypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalarytypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobcategoryScalarFieldEnum = {
  id: 'id',
  icon: 'icon',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationidScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobroleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobexperienceIdScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  slug: 'slug',
  bio: 'bio',
  vision: 'vision',
  logoPublicId: 'logoPublicId',
  logoSecureUrl: 'logoSecureUrl',
  bannerPublicId: 'bannerPublicId',
  bannerSecureUrl: 'bannerSecureUrl',
  industryTypeId: 'industryTypeId',
  organizationTypeId: 'organizationTypeId',
  teamTypeId: 'teamTypeId',
  email: 'email',
  phone: 'phone',
  establishmentDate: 'establishmentDate',
  website: 'website',
  totalViews: 'totalViews',
  address: 'address',
  cityId: 'cityId',
  stateId: 'stateId',
  countryId: 'countryId',
  mapLink: 'mapLink',
  isProfileVerified: 'isProfileVerified',
  documentVerifiedAt: 'documentVerifiedAt',
  profileCompletion: 'profileCompletion',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  jobCategoryId: 'jobCategoryId',
  jobRoleId: 'jobRoleId',
  jobExperienceId: 'jobExperienceId',
  educationId: 'educationId',
  jobTypeId: 'jobTypeId',
  salaryTypeId: 'salaryTypeId',
  title: 'title',
  slug: 'slug',
  vacancies: 'vacancies',
  min_salary: 'min_salary',
  max_salary: 'max_salary',
  custom_salary: 'custom_salary',
  deadline: 'deadline',
  description: 'description',
  status: 'status',
  apply_on: 'apply_on',
  apply_email: 'apply_email',
  apply_url: 'apply_url',
  featured: 'featured',
  highlight: 'highlight',
  fetaured_until: 'fetaured_until',
  highlight_until: 'highlight_until',
  jobcount: 'jobcount',
  total_views: 'total_views',
  cityId: 'cityId',
  stateId: 'stateId',
  countryId: 'countryId',
  address: 'address',
  salary_mode: 'salary_mode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobtagScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BenfitsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Job_benfitsScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  benfitsId: 'benfitsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobskillScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  skillId: 'skillId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  leble: 'leble',
  price: 'price',
  joblimit: 'joblimit',
  featuredjoblimit: 'featuredjoblimit',
  highlightjoblimit: 'highlightjoblimit',
  recommended: 'recommended',
  frontendshow: 'frontendshow',
  profileverify: 'profileverify',
  home: 'home',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPlanScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  planId: 'planId',
  jobLimit: 'jobLimit',
  featuredJobLimit: 'featuredJobLimit',
  highlightJobLimit: 'highlightJobLimit',
  profileVerify: 'profileVerify',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  professionIds: 'professionIds',
  experience_lable: 'experience_lable',
  skill_id: 'skill_id',
  image_public_id: 'image_public_id',
  image_secure_url: 'image_secure_url',
  title: 'title',
  full_name: 'full_name',
  slug: 'slug',
  email: 'email',
  phone_one: 'phone_one',
  phone_two: 'phone_two',
  birth_date: 'birth_date',
  website: 'website',
  cv: 'cv',
  bio: 'bio',
  gender: 'gender',
  marital_status: 'marital_status',
  address: 'address',
  cityId: 'cityId',
  stateId: 'stateId',
  countryId: 'countryId',
  status: 'status',
  profile_completion: 'profile_completion',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateSkillScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  skillIds: 'skillIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateLanguageScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  langIds: 'langIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  candidate_id: 'candidate_id',
  company: 'company',
  department: 'department',
  designation: 'designation',
  start: 'start',
  end: 'end',
  responsibilities: 'responsibilities',
  currently_working: 'currently_working',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobEducationScalarFieldEnum = {
  id: 'id',
  candidate_id: 'candidate_id',
  level: 'level',
  degree: 'degree',
  year: 'year',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentSettingsScalarFieldEnum = {
  id: 'id',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteSettingsScalarFieldEnum = {
  id: 'id',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderJobScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  plan_id: 'plan_id',
  package_name: 'package_name',
  transaction_id: 'transaction_id',
  order_id: 'order_id',
  payment_provider: 'payment_provider',
  amount: 'amount',
  paid_in_currency: 'paid_in_currency',
  default_amount: 'default_amount',
  payment_status: 'payment_status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserplanScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  plan_id: 'plan_id',
  job_limit: 'job_limit',
  featured_job_limit: 'featured_job_limit',
  highlight_job_limit: 'highlight_job_limit',
  profile_verify: 'profile_verify',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobbookmarkScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplyjobScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionForumScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  views: 'views',
  answers: 'answers',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  UserId: 'UserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagQuestionForumScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  questionId: 'questionId',
  createdAt: 'createdAt'
};

exports.Prisma.AnswerForumScalarFieldEnum = {
  id: 'id',
  content: 'content',
  UserId: 'UserId',
  questionId: 'questionId',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagForumScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoteForumScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  actionId: 'actionId',
  actionType: 'actionType',
  voteType: 'voteType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollectionForumScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InteractionForumScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  actionId: 'actionId',
  actionType: 'actionType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WriterScalarFieldEnum = {
  id: 'id',
  penName: 'penName',
  category: 'category',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  writerId: 'writerId',
  writerName: 'writerName',
  title: 'title',
  slug: 'slug',
  image: 'image',
  category: 'category',
  description: 'description',
  date: 'date',
  status: 'status',
  count: 'count',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  writerId: 'writerId',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  type: 'type',
  message: 'message',
  messageStatus: 'messageStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OnlineUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  socketId: 'socketId',
  connectedAt: 'connectedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SELLER: 'SELLER',
  WRITER: 'WRITER'
};

exports.RoleJob = exports.$Enums.RoleJob = {
  CANDIDATE: 'CANDIDATE',
  ADMIN: 'ADMIN',
  COMPANY: 'COMPANY'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  LIKE: 'LIKE',
  FOLLOW: 'FOLLOW',
  COMMENT: 'COMMENT'
};

exports.StoreStatus = exports.$Enums.StoreStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  BANNED: 'BANNED',
  DISABLED: 'DISABLED'
};

exports.ShippingFeeMethod = exports.$Enums.ShippingFeeMethod = {
  ITEM: 'ITEM',
  WEIGHT: 'WEIGHT',
  FIXED: 'FIXED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  Pending: 'Pending',
  Confirmed: 'Confirmed',
  Processing: 'Processing',
  Shipped: 'Shipped',
  OutforDelivery: 'OutforDelivery',
  Delivered: 'Delivered',
  Cancelled: 'Cancelled',
  Failed: 'Failed',
  Refunded: 'Refunded',
  Returned: 'Returned',
  PartiallyShipped: 'PartiallyShipped',
  OnHold: 'OnHold'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  Pending: 'Pending',
  Paid: 'Paid',
  Failed: 'Failed',
  Declined: 'Declined',
  Cancelled: 'Cancelled',
  Refunded: 'Refunded',
  PartiallyRefunded: 'PartiallyRefunded',
  Chargeback: 'Chargeback'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  Paypal: 'Paypal',
  Stripe: 'Stripe'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  Pending: 'Pending',
  Processing: 'Processing',
  ReadyForShipment: 'ReadyForShipment',
  Shipped: 'Shipped',
  Delivered: 'Delivered',
  Canceled: 'Canceled',
  Returned: 'Returned',
  Refunded: 'Refunded',
  FailedDelivery: 'FailedDelivery',
  OnHold: 'OnHold',
  Backordered: 'Backordered',
  PartiallyShipped: 'PartiallyShipped',
  ExchangeRequested: 'ExchangeRequested',
  AwaitingPickup: 'AwaitingPickup'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  active: 'active',
  expired: 'expired',
  pending: 'pending'
};

exports.ApplyOn = exports.$Enums.ApplyOn = {
  app: 'app',
  email: 'email',
  custom_url: 'custom_url'
};

exports.SalaryMode = exports.$Enums.SalaryMode = {
  range: 'range',
  custom: 'custom'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  married: 'married',
  single: 'single'
};

exports.Status = exports.$Enums.Status = {
  available: 'available',
  not_available: 'not_available'
};

exports.PaymentStatusJob = exports.$Enums.PaymentStatusJob = {
  paid: 'paid',
  unpaid: 'unpaid',
  pending: 'pending'
};

exports.ActionType = exports.$Enums.ActionType = {
  question: 'question',
  answer: 'answer'
};

exports.VoteType = exports.$Enums.VoteType = {
  upvote: 'upvote',
  downvote: 'downvote'
};

exports.ActionTypeInteraction = exports.$Enums.ActionTypeInteraction = {
  question: 'question',
  answer: 'answer'
};

exports.MessageType = exports.$Enums.MessageType = {
  text: 'text',
  image: 'image',
  video: 'video',
  audio: 'audio'
};

exports.Prisma.ModelName = {
  User: 'User',
  CouponToUser: 'CouponToUser',
  Session: 'Session',
  Post: 'Post',
  Follow: 'Follow',
  Media: 'Media',
  Comment: 'Comment',
  Like: 'Like',
  Bookmark: 'Bookmark',
  Notification: 'Notification',
  Category: 'Category',
  SubCategory: 'SubCategory',
  Store: 'Store',
  UserFollowingStore: 'UserFollowingStore',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  Size: 'Size',
  ProductVariantImage: 'ProductVariantImage',
  Color: 'Color',
  Spec: 'Spec',
  Question: 'Question',
  Country: 'Country',
  ShippingRate: 'ShippingRate',
  OfferTag: 'OfferTag',
  FreeShipping: 'FreeShipping',
  FreeShippingCountry: 'FreeShippingCountry',
  Review: 'Review',
  ReviewImage: 'ReviewImage',
  Cart: 'Cart',
  CartItem: 'CartItem',
  ShippingAddress: 'ShippingAddress',
  Order: 'Order',
  OrderGroup: 'OrderGroup',
  OrderItem: 'OrderItem',
  Wishlist: 'Wishlist',
  Coupon: 'Coupon',
  PaymentDetails: 'PaymentDetails',
  Industry: 'Industry',
  Organization: 'Organization',
  Team: 'Team',
  CountryJob: 'CountryJob',
  State: 'State',
  City: 'City',
  Language: 'Language',
  Skill: 'Skill',
  Profession: 'Profession',
  Jobtype: 'Jobtype',
  Salarytype: 'Salarytype',
  Jobcategory: 'Jobcategory',
  Educationid: 'Educationid',
  Tag: 'Tag',
  Jobrole: 'Jobrole',
  JobexperienceId: 'JobexperienceId',
  Company: 'Company',
  Jobs: 'Jobs',
  Jobtag: 'Jobtag',
  Benfits: 'Benfits',
  Job_benfits: 'Job_benfits',
  Jobskill: 'Jobskill',
  Plan: 'Plan',
  UserPlan: 'UserPlan',
  Candidate: 'Candidate',
  CandidateSkill: 'CandidateSkill',
  CandidateLanguage: 'CandidateLanguage',
  Experience: 'Experience',
  JobEducation: 'JobEducation',
  PaymentSettings: 'PaymentSettings',
  SiteSettings: 'SiteSettings',
  OrderJob: 'OrderJob',
  Userplan: 'Userplan',
  Jobbookmark: 'Jobbookmark',
  Applyjob: 'Applyjob',
  Blog: 'Blog',
  QuestionForum: 'QuestionForum',
  TagQuestionForum: 'TagQuestionForum',
  AnswerForum: 'AnswerForum',
  TagForum: 'TagForum',
  VoteForum: 'VoteForum',
  CollectionForum: 'CollectionForum',
  InteractionForum: 'InteractionForum',
  Writer: 'Writer',
  News: 'News',
  Image: 'Image',
  Messages: 'Messages',
  OnlineUser: 'OnlineUser'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
